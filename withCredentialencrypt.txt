https://stackblitz.com/edit/encrypt-decrypt-app
https://stackoverflow.com/questions/63598208/encryption-in-asp-net-core-and-decryption-in-angular



  npm i "crypto-js": "^3.1.8","@types/crypto-js": "^3.1.43"
  
  
  
  // ========================================================= Angular ================================================================= //
  
 
import { RequestModel } from './../../shared/models/common.model';
import { HttpClient } from "@angular/common/http";
import { BehaviorSubject, forkJoin } from "rxjs";
import { Injectable, Output } from "@angular/core";
import { environment as env } from "src/environments/environment";

import * as CryptoJS from 'crypto-js';

@Injectable({
  providedIn: "root",
})

export class WebApiService {
  private endpoint = env.apiEndpoint;

  @Output() serviceResponse: any;
  @Output() serviceError: any;
  private OpenIndCount = 0;
  @Output() overlayMessage: string;
  private requests = [];
  private busyIndicator = new BehaviorSubject(false);
  busyIndicatorChange = this.busyIndicator.asObservable();

  constructor(private http: HttpClient, private notification: GlxNotificationService) {
    if (env.production) {
      this.endpoint = window.location.origin + env.apiEndpoint;
    } else {
      this.endpoint = env.apiEndpoint;
    }
  }
  Base64 = {
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    _utf8_encode: function (e) { e = e.replace(/\r\n/g, "\n"); var t = ""; for (var n = 0; n < e.length; n++) { var r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r) } else if (r > 127 && r < 2048) { t += String.fromCharCode(r >> 6 | 192); t += String.fromCharCode(r & 63 | 128) } else { t += String.fromCharCode(r >> 12 | 224); t += String.fromCharCode(r >> 6 & 63 | 128); t += String.fromCharCode(r & 63 | 128) } } return t },
    _utf8_decode: function (e) { var t = ""; var n = 0; var r = 0, c1 = 0, c2 = 0; while (n < e.length) { r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r); n++ } else if (r > 191 && r < 224) { c2 = e.charCodeAt(n + 1); t += String.fromCharCode((r & 31) << 6 | c2 & 63); n += 2 } else { c2 = e.charCodeAt(n + 1); var c3 = e.charCodeAt(n + 2); t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63); n += 3 } } return t },
    encode: function (e) { var t = ""; var n, r, i, s, o, u, a; var f = 0; e = this._utf8_encode(e); while (f < e.length) { n = e.charCodeAt(f++); r = e.charCodeAt(f++); i = e.charCodeAt(f++); s = n >> 2; o = (n & 3) << 4 | r >> 4; u = (r & 15) << 2 | i >> 6; a = i & 63; if (isNaN(r)) { u = a = 64 } else if (isNaN(i)) { a = 64 } t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a) } return t },
    decode: function (e) { var t = ""; var n, r, i; var s, o, u, a; var f = 0; e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (f < e.length) { s = this._keyStr.indexOf(e.charAt(f++)); o = this._keyStr.indexOf(e.charAt(f++)); u = this._keyStr.indexOf(e.charAt(f++)); a = this._keyStr.indexOf(e.charAt(f++)); n = s << 2 | o >> 4; r = (o & 15) << 4 | u >> 2; i = (u & 3) << 6 | a; t = t + String.fromCharCode(n); if (u != 64) { t = t + String.fromCharCode(r) } if (a != 64) { t = t + String.fromCharCode(i) } } t = this.Base64._utf8_decode(t); return t }

  }

  loadBusyIndicator() {
    this.busyIndicator.next(true);
    this.OpenIndCount++;
  }

  closeBusyIndicator() {
    this.OpenIndCount--;
    if (this.OpenIndCount == 0) {
      this.busyIndicator.next(false);
    }
  }

  async get(url: string, progressMessage?: string, showBusyIndicator: boolean = false): Promise<any> {
    try {
      this.showProgress(progressMessage, showBusyIndicator);
      let result = await this.http.get(this.endpoint + url, { withCredentials: true }).toPromise();
      return result;
    } catch (error) {
      this.handleServiceErrors(error);
      console.log(error);
    } finally {
      if (showBusyIndicator) {
        this.closeBusyIndicator();
      }
    }
  }

  //  public getService(url: string, progressMessage: string): Observable<any> {
  //   try {
  //     this.overlayMessage = progressMessage;
  //     this.loadBusyIndicator();
  //     return this.http.get(this.endpoint + url,  { withCredentials: true });
  //   } catch (error) {
  //     this.handleServiceErrors(error);
  //   } finally {
  //     this.closeBusyIndicator();
  //   }
  // }


  encrypt (msg, pass) {
    // random salt for derivation
    var keySize = 256;
    var salt = CryptoJS.lib.WordArray.random(16);
    // well known algorithm to generate key
    var key = CryptoJS.PBKDF2(pass, salt, {
        keySize: keySize/32,
        iterations: 100
      });
    // random IV
    var iv = CryptoJS.lib.WordArray.random(128/8);      
    // specify everything explicitly
    var encrypted = CryptoJS.AES.encrypt(msg, key, { 
      iv: iv, 
      padding: CryptoJS.pad.Pkcs7,
      mode: CryptoJS.mode.CBC        
    });
    // combine everything together in base64 string
    var result = CryptoJS.enc.Base64.stringify(salt.concat(iv).concat(encrypted.ciphertext));
    return result;
  }

  async Encryptpost(url: string, postdata: any, progressMessage?: string, showBusyIndicator: boolean = false): Promise<any> {
    try {
      let getEncryptData = this.encrypt(JSON.stringify(postdata), "Test1234").toString();
      this.showProgress(progressMessage, showBusyIndicator);
      const response = await this.http.post(this.endpoint + url, getEncryptData, { withCredentials: true }).toPromise();
      return response;
    } catch (error) {
      this.handleServiceErrors(error);
      console.log(error);
    } finally {
      if (showBusyIndicator) {
        this.closeBusyIndicator();
      }
    }
  }

  async post(url: string, postdata: any, progressMessage?: string, showBusyIndicator: boolean = false): Promise<any> {
    try {
      let conversionOutput = this.encrypt(JSON.stringify(postdata), "TTT").toString();
      console.log(conversionOutput);
      this.showProgress(progressMessage, showBusyIndicator);//this.Base64.encode(JSON.stringify(postdata))
      const response = await this.http.post(this.endpoint + url, postdata, { withCredentials: true }).toPromise();
      return response;
    } catch (error) {
      this.handleServiceErrors(error);
      console.log(error);
    } finally {
      if (showBusyIndicator) {
        this.closeBusyIndicator();
      }
    }
  }
  async postDocs(url: string, postdata: any, progressMessage?: string, showBusyIndicator: boolean = false, buffer = true): Promise<any> {
    try {
      this.showProgress(progressMessage, showBusyIndicator);
      if (buffer) {
        const response = await this.http.post(this.endpoint + url, postdata, {
          withCredentials: true,
          responseType: "arraybuffer"
        }).toPromise();
        return response;
      } else {
        const response = await this.http.post(this.endpoint + url, postdata, { withCredentials: true, responseType: "text" }).toPromise();
        return response;
      }


    } catch (error) {
      this.handleServiceErrors(error);
      console.log(error);
    } finally {
      if (showBusyIndicator) {
        this.closeBusyIndicator();
      }
    }
  }
  private getRequest(url: string, postdata: any, method: string) {
    if (method === "POST") {
      return this.http.post(this.endpoint + url, postdata, { withCredentials: true });
    } else {
      return this.http.get(this.endpoint + url, { withCredentials: true });
    }
  }

  async multi(requests: RequestModel[], progressMessage?: string, showBusyIndicator: boolean = false): Promise<any> {
    try {
      this.showProgress(progressMessage, showBusyIndicator);
      this.requests = [];
      requests.forEach(r => {
        this.requests.push(this.getRequest(r.Url, r.PostData, r.Method));
      });
      if (this.requests && this.requests.length > 0) {
        const result = await forkJoin(this.requests).toPromise();
        return result;
      }
    } catch (error) {
      this.handleServiceErrors(error);
      console.log(error);
    } finally {
      if (showBusyIndicator) {
        this.closeBusyIndicator();
      }
    }
  }

  // public postService(url: string, postdata: any): Observable<any> {
  //   return this.http.post( this.endpoint + url, postdata,  { withCredentials: true });
  // }

  handleServiceErrors(error) {
    let errorMessage = "";
    if (error.error instanceof ErrorEvent) {
      errorMessage = error.error.message;
    } else {
      errorMessage = "Error Code: ${error.status}\nMessage: ${error.message}";
    }
    this.notification.ErrorClosable(error.message);
    // window.alert(errorMessage);
  }

  private showProgress(progressMessage: string, showProgress: boolean) {
    if (showProgress) {
      this.overlayMessage = progressMessage ? progressMessage : GLX_LABELS.LOADING_DATA;
      this.loadBusyIndicator();
    }
  }
}



// ==================================================C# ==================================================== //



using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;

namespace testwebapi.App_Start
{
    public class Encryption
    {
        // This constant is used to determine the keysize of the encryption algorithm in bits.
        // We divide this by 8 within the code below to get the equivalent number of bytes.
        private const int Keysize = 128;

        // This constant determines the number of iterations for the password bytes generation function.
        private const int DerivationIterations = 1000;

        public static string Encrypt(string plainText, string passPhrase)
        {
            // Salt and IV is randomly generated each time, but is preprended to encrypted cipher text
            // so that the same Salt and IV values can be used when decrypting.  
            var saltStringBytes = GenerateBitsOfRandomEntropy(16);
            var ivStringBytes = GenerateBitsOfRandomEntropy(16);
            var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
            using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))
            {
                var keyBytes = password.GetBytes(Keysize / 8);
                using (var symmetricKey = new RijndaelManaged())
                {
                    symmetricKey.BlockSize = 128;
                    symmetricKey.Mode = CipherMode.CBC;
                    symmetricKey.Padding = PaddingMode.PKCS7;
                    using (var encryptor = symmetricKey.CreateEncryptor(keyBytes, ivStringBytes))
                    {
                        using (var memoryStream = new MemoryStream())
                        {
                            using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                            {
                                cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);
                                cryptoStream.FlushFinalBlock();
                                // Create the final bytes as a concatenation of the random salt bytes, the random iv bytes and the cipher bytes.
                                var cipherTextBytes = saltStringBytes;
                                cipherTextBytes = cipherTextBytes.Concat(ivStringBytes).ToArray();
                                cipherTextBytes = cipherTextBytes.Concat(memoryStream.ToArray()).ToArray();
                                memoryStream.Close();
                                cryptoStream.Close();
                                return Convert.ToBase64String(cipherTextBytes);
                            }
                        }
                    }
                }
            }
        }

        public static string Decrypt(string cipherText, string password)
        {
            byte[] cipherBytes = Convert.FromBase64String(cipherText);
            using (Aes encryptor = Aes.Create())
            {
                // extract salt (first 16 bytes)
                var salt = cipherBytes.Take(16).ToArray();
                // extract iv (next 16 bytes)
                var iv = cipherBytes.Skip(16).Take(16).ToArray();
                // the rest is encrypted data
                var encrypted = cipherBytes.Skip(32).ToArray();
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(password, salt, 100);
                encryptor.Key = pdb.GetBytes(32);
                encryptor.Padding = PaddingMode.PKCS7;
                encryptor.Mode = CipherMode.CBC;
                encryptor.IV = iv;
                // you need to decrypt this way, not the way in your question
                using (MemoryStream ms = new MemoryStream(encrypted))
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Read))
                    {
                        using (var reader = new StreamReader(cs, Encoding.UTF8))
                        {
                            return reader.ReadToEnd();
                        }
                    }
                }
            }
        }
        private static byte[] GenerateBitsOfRandomEntropy(int size)
        {
            // 32 Bytes will give us 256 bits.
            // 16 Bytes will give us 128 bits.
            var randomBytes = new byte[size];
            using (var rngCsp = new RNGCryptoServiceProvider())
            {
                // Fill the array with cryptographically secure random bytes.
                rngCsp.GetBytes(randomBytes);
            }
            return randomBytes;
        }
    }
}
